version: '3.1'

# to make use of this compose, make sure your local.env has these settings:
#
# SURF_DATABASE_URL=mysql://root:@127.0.0.1:23306/surface
# SURF_ALLOWED_HOSTS=*
# SURF_DKRON_WEB_PORT=8888
# SURF_DKRON_URL=http://localhost:8888/
# SURF_DKRON_SERVER=true
#

x-env: &env
  env_file:
    - ../surface/local.env
  environment:
    SURF_DATABASE_URL: mysql://root:@mysql/surface
    SURF_DKRON_URL: http://dkron:8888/
    SURF_DKRON_BIN_DIR: /surface/dev/dkronlinux
    SURF_DKRON_NODE_NAME: surfdkron
    SCHEDULING_STRATEGY: dkron
x-surf: &surf
  <<: *env
  build:
    context: ..
    args:
      - SCHEDULING_STRATEGY=dkron
    dockerfile: dev/Dockerfile
  working_dir: /surface/surface
  depends_on:
    - mysql
  volumes:
    - ..:/surface
  deploy:
    restart_policy:
      condition: on-failure
      delay: 5s

services:
  surface:
    <<: *surf
    command: ./manage.py runserver 0.0.0.0:8000

  dkron:
    <<: *surf
    command: ./manage.py run_dkron -s
    ports:
      - 8888:8888
  resync-rootbox:
    <<: *surf
    command: ./manage.py resync_rootbox

  nginx:
    # optional in dev - use for staticfiles in production
    <<: *env
    # FIXME: add proper tag once github actions start working again
    image: ghcr.io/surface-security/nginx:latest
    environment:
      # add proper ALLOWED_HOSTS if production (or remove if already defined in an local.env)
      SURF_ALLOWED_HOSTS: '*'
      NGINX_APP_IP: surface
      NGINX_APP_PORT: 8000
      SURF_STATIC_ROOT: ''
    depends_on:
      - surface
    ports:
      - 8080:8080
    volumes:
      - ./media:/surface/media/
      - ./nginx.template.conf:/etc/nginx/templates/default.conf.template:ro

  mysql:
    image: mysql:8.0.30
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_general_ci
      - --skip-character-set-client-handshake
    ports:
      - 33306:3306
    environment:
      MYSQL_INNODB_BUFFER_POOL_SIZE: 512M
      MYSQL_DATABASE: surface
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    volumes:
      - mysql_data:/var/lib/mysql

  dockerd:
    # isolated docker host to test scanners
    image: docker:20.10-dind
    environment:
      DOCKER_TLS_CERTDIR: ''
    command: --tls=false
    privileged: true
    ports:
      - 22375:2375

volumes:
  mysql_data: {}
